rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is receptionist
    function isReceptionist() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'receptionist';
    }
    
    // Helper function to check if user is admin or receptionist
    function isAdminOrReceptionist() {
      return isAdmin() || isReceptionist();
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Users collection - consolidated rules
    match /users/{userId} {
      // Allow users to read their own documents
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow users to create their own documents during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow users to update their own documents
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow admin and receptionist users to read and write all user documents
      allow read, write: if isAdminOrReceptionist();
      
      // Allow limited updates for admin password authentication (lastLoginAt only)
      allow update: if request.auth == null && 
        request.resource.data.keys().hasOnly(['lastLoginAt']) &&
        request.resource.data.lastLoginAt is timestamp;
    }
    
    // Allow reading user documents for authentication (admin-set passwords)
    // This is needed for the authenticateWithAdminPassword function
    match /users/{document=**} {
      // Allow unauthenticated reads for admin password authentication
      allow read: if request.auth == null;
      
      // Allow authenticated users to read users collection for member ID checking during signup
      allow read: if isAuthenticated();
      
      // Allow admin and receptionist users to read all users for listing and management
      allow read: if isAdminOrReceptionist();
    }
    
    // Memberships collection
    match /memberships/{membershipId} {
      // Allow users to read their own memberships
      allow read: if isAuthenticated() && request.auth.uid == resource.data.uid;
      
      // Allow users to create their own membership requests
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;
      
      // Allow admin and receptionist users to read and write all memberships
      allow read, write: if isAdminOrReceptionist();
    }
    
    // Allow users to query their own memberships and admins/receptionists to query all
    match /memberships/{document=**} {
      allow read: if isAuthenticated() && 
        (isAdminOrReceptionist() || resource.data.uid == request.auth.uid);
    }
    
    // Payments collection
    match /payments/{paymentId} {
      // Allow users to read their own payments
      allow read: if isAuthenticated() && request.auth.uid == resource.data.uid;
      
      // Allow users to create their own payment records
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;
      
      // Allow admin and receptionist users to read and write all payments
      allow read, write: if isAdminOrReceptionist();
    }
    
    // Allow users to query their own payments and admins/receptionists to query all
    match /payments/{document=**} {
      allow read: if isAuthenticated() && 
        (isAdminOrReceptionist() || resource.data.uid == request.auth.uid);
    }
    
    // MembershipRequests collection
    match /membershipRequests/{requestId} {
      // Allow users to read their own membership requests
      allow read: if isAuthenticated() && request.auth.uid == resource.data.uid;
      
      // Allow users to create their own membership requests
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;
      
      // Allow admin and receptionist users to read and write all membership requests
      allow read, write: if isAdminOrReceptionist();
    }
    
    // Allow users to query their own membership requests and admins/receptionists to query all
    match /membershipRequests/{document=**} {
      allow read: if isAuthenticated() && 
        (isAdminOrReceptionist() || resource.data.uid == request.auth.uid);
    }
    
    // Receipts collection
    match /receipts/{receiptId} {
      // Allow users to read their own receipts
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Allow users to create their own receipts (for membership generation)
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      // Allow admin and receptionist users to read and write all receipts
      allow read, write: if isAdminOrReceptionist();
    }
    
    // Allow users to query their own receipts and admins/receptionists to query all
    match /receipts/{document=**} {
      allow read: if isAuthenticated() && 
        (isAdminOrReceptionist() || resource.data.userId == request.auth.uid);
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      // Allow admin and receptionist users to read and write all expenses
      allow read, write: if isAdminOrReceptionist();
    }
    
    // Allow admin and receptionist users to query all expenses
    match /expenses/{document=**} {
      allow read: if isAdminOrReceptionist();
    }
  }
}
